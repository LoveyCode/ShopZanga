import React, {createContext, useEffect, useState} from "react";
import newproduct1 from '../Components/Assets/New_Collections'
import BASE_URL from '../apiConfig';



export const ShopContext = createContext(null);
const getDefaultCart = () => {
    let cart = {};
    for (let index = 0; index < 300+1; index++) {
      cart[index] = 0
    }
    return cart;
}

const getDefaultWishlist = () => {
    let wishlist = {};
    for (let index = 0; index < 300+1; index++) {
      wishlist[index] = 0
    }
    return wishlist;
}


const ShopContextProvider = (props) => {
    const [all_product, setAll_product]=useState([]);
    const [cartItems, setCartItems] = useState(getDefaultCart())
    const [wishlistItems, setWishlistItems] = useState(getDefaultWishlist())

   
 

    useEffect(() => {
        // Fetch all products
        fetch('http://localhost:4000/allproducts')
            .then((response) => response.json())
            .then((data) => setAll_product(data));
    
        // Fetch cart details if user is authenticated
        if (localStorage.getItem('auth-token')) {
            fetch('http://localhost:4000/getcart', { 
                method: 'POST',
                headers: {
                    Accept: 'application/form-data',
                    'auth-token': localStorage.getItem('auth-token'),
                    'Content-Type': 'application/json',
                },
            })
                .then((response) => response.json())
                .then((data) => setCartItems(data));
        }
    }, []);


    useEffect(() => {
        // Fetch all products
        fetch('http://localhost:4000/allproducts')
            .then((response) => response.json())
            .then((data) => setAll_product(data));
    
        // Fetch wishlist details if user is authenticated
        if (localStorage.getItem('auth-token')) {
            fetch(`${BASE_URL}/getwishlist`, { // Updated path
                method: 'POST',
                headers: {
                    Accept: 'application/form-data',
                    'auth-token': localStorage.getItem('auth-token'),
                    'Content-Type': 'application/json',
                },
            })
                .then((response) => response.json())
                .then((data) => setWishlistItems(data));
        }
    }, []);
    
    
   
   
   
   
   
   
   
    // useEffect(() => {
    //     fetch('http://localhost:4000/products/allproducts') // Updated path
    //         .then((response) => response.json())
    //         .then((data) => setAll_product(data));
    
    //     if (localStorage.getItem('auth-token')) {
    //         fetch('http://localhost:4000/cartWishlist/getcart', { // Assuming this route remains unchanged
    //             method: 'POST',
    //             headers: {
    //                 Accept: 'application/form-data',
    //                 'auth-token': `${localStorage.getItem('auth-token')}`,
    //                 'Content-Type': 'application/json',
    //             },
    //             body: '',
    //         })
    //             .then((response) => response.json())
    //             .then((data) => setCartItems(data));
    //     }
    // }, []);
    


    // useEffect(() => {
    //     fetch('http://localhost:4000/products/allproducts') // Updated path
    //         .then((response) => response.json())
    //         .then((data) => setAll_product(data));
    
    //     if (localStorage.getItem('auth-token')) {
    //         fetch('http://localhost:4000/getwishlist', { // Assuming this route remains unchanged
    //             method: 'POST',
    //             headers: {
    //                 Accept: 'application/form-data',
    //                 'auth-token': `${localStorage.getItem('auth-token')}`,
    //                 'Content-Type': 'application/json',
    //             },
    //             body: '',
    //         })
    //             .then((response) => response.json())
    //             .then((data) => setWishlistItems(data));
    //     }
    // }, []);
    



const addToCart = (itemId) =>{

setCartItems ((prev) =>({...prev, [itemId] :prev[itemId] +1}));

if (localStorage.getItem('auth-token')){
    fetch(`${BASE_URL}/cartWishlist/addtocart`, {
        method: 'POST',
        headers:{
            Accept: 'application/form-data',
            'auth-token': `${localStorage.getItem('auth-token')}`,
            'Content-Type': 'application/json',
        },
        body:JSON.stringify({'itemId':itemId}), 
    })

    
}
}




const removeFromCart = (itemId) =>{
    setCartItems ((prev) =>({...prev, [itemId] :prev[itemId] -1}))

    if (localStorage.getItem('auth-token')){
        fetch(`${BASE_URL}/cartWishlist/removefromcart`, {
            method: 'POST',
            headers:{
                Accept: 'application/form-data',
                'auth-token': `${localStorage.getItem('auth-token')}`,
                'Content-Type': 'application/json',
            },
            body:JSON.stringify({'itemId':itemId}), 
        })
  
        }
    }

    const addToWishlist = (itemId) =>{
        setWishlistItems ((prev) =>({...prev, [itemId] :prev[itemId] +1}));
        // this line means if localStorage has the auth-token, that means we are 
        // LoginSignup, then we can fetch in the 2nd line
        if (localStorage.getItem('auth-token')){
           
            fetch(`${BASE_URL}/cartWishlist/addtowishlist`,{
                method: 'POST',
                headers:{
                    Accept: 'application/form-data',
                    'auth-token': `${localStorage.getItem('auth-token')}`,
                    'Content-Type': 'application/json',
                },
                body:JSON.stringify({'itemId':itemId}), 
            })
            }
        
        }

    const removeFromWishlist = (itemId) =>{
        setWishlistItems ((prev) =>({...prev, [itemId] :prev[itemId] -1}))
        if (localStorage.getItem('auth-token')){
            fetch(`${BASE_URL}/cartWishlist/removefromwishlist`,{
                method: 'POST',
                headers:{
                    Accept: 'application/form-data',
                    'auth-token': `${localStorage.getItem('auth-token')}`,
                    'Content-Type': 'application/json',
                },
                body:JSON.stringify({'itemId':itemId}), 
            })
           
            }
        }
    



const getTotalCartAmount = () => {
    let totalAmount = 0;
    for(const item in cartItems)
    {
        if(cartItems[item]>0)
            {
            let itemInfo = all_product.find((product) =>product.id===Number(item))
            totalAmount += itemInfo.new_price * cartItems[item]; 
        }
       
    }
    return totalAmount;
}

const getTotalCartItems = () => {
    let totalItem = 0;
    for (const item in cartItems)
    {
        if(cartItems[item] > 0)
        {
            totalItem  += cartItems[item];
        }
       
    }
    return totalItem;
}

const getTotalWishlistItems = () => {
    let totalWishlist =0;
    for (const item in wishlistItems)
    {
        if(wishlistItems[item] > 0)
            {
                totalWishlist  += wishlistItems[item];
            }
    }
    return totalWishlist;
}



    const contextValue = {getTotalWishlistItems, getTotalCartItems, getTotalCartAmount, 
        newproduct1, all_product, cartItems, wishlistItems,
        addToCart, removeFromCart, addToWishlist, removeFromWishlist};
    return (
    <div>
    <ShopContext.Provider value={contextValue}>
        {props.children}
    </ShopContext.Provider>
    </div>
    )
}

export default ShopContextProvider;